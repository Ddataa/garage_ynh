#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

#port mandatory for garage 
ip=$(get_ip)


domain=$YNH_APP_ARG_DOMAIN
rpc_secret=$YNH_APP_ARG_RPC_SECRET
bootstrap_peers=$YNH_APP_ARG_BOOTSTRAP_PEERS
datadir=$YNH_APP_ARG_DATADIR
weight=$YNH_APP_ARG_WEIGHT


### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2"...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
### About --weight and 
### ynh_script_progression will show to your final users the progression of each scripts.
### In order to do that, --weight will represent the relative time of execution compared to the other steps in the script.
###  is a packager option, it will show you the execution time since the previous call.
### This option should be removed before releasing your app.
### Use the execution time, given by , to estimate the weight of a step.
### A common way to do it is to set a weight equal to the execution time in second +1.
### The execution time is given for the duration since the previous call. So the weight should be applied to this previous call.
ynh_script_progression --message="Validating installation parameters..."  --weight=1

### If the app uses NGINX as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uWSGI), the final path should be "/opt/yunohost/$app"
final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

if [[ -n "$rpc_secret" ]]
then
	echo "$rpc_secret" | grep -E ^[0-9a-f]{64}$ || ynh_die --message="rpc_secret have to be a 32-byte hex-encoded random string. See https://garagehq.deuxfleurs.fr/documentation/reference-manual/configuration/ for more information"
else
	rpc_secret=$(ynh_string_random 32| od -A n -t x -w64 | sed 's/ //g')
fi
if [ -n "$bootstrap_peers" ] 
then
	echo "$bootstrap_peers" | grep -E '[0-9a-f]{64}@((\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}):[0-9]{1,4}' || ynh_die --message="friend server id must have id with the following form : 1799bccfd7411eddcf9ebd316bc1f5287ad12a68094e1c6ac6abde7e6feae1ec@192.168.1.1:1234 or  1799bccfd7411eddcf9ebd316bc1f5287ad12a68094e1c6ac6abde7e6feae1ec@example.tld:1234"
fi

if [ "$datadir" = "/home/yunohost.app/__APP_NAME__/data" ]
then
	datadir="/home/yunohost.app/$app/data"
fi

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url="/"

#=================================================
# LOOKING FOR VIRTUALISATION
#=================================================
ynh_script_progression --message="Checking virtualisation availabilityâ€¦" --weight=1

if [  "$(which modprobe)" = ""  ] 
then
	virtualisation=false
	export VIRTUALISATION=false
	# uncomment systemd isolation
	virt_protection=""
else
    export VIRTUALISATION=true
	virtualisation=true
	# comment systemd isolation to allow mount disk
	virt_protection="#"
fi
ynh_app_setting_set --app=$app --key=virtualisation --value=$virtualisation

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..."  --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=rpc_secret --value=$rpc_secret
ynh_app_setting_set --app=$app --key=datadir --value=$datadir
ynh_app_setting_set --app=$app --key=bootstrap_peers --value=$bootstrap_peers
ynh_app_setting_set --app=$app --key=weight --value=$weight


#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding available ports..."  --weight=1

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find an available port

port=$(ynh_find_port --port=4000)
ynh_app_setting_set --app=$app --key=port --value=$port
port_api=$(ynh_find_port --port=5000)
ynh_app_setting_set --app=$app --key=port_api --value=$port_api


# Optional: Expose this port publicly
# (N.B.: you only need to do this if the app actually needs to expose the port publicly.
# If you do this and the app doesn't actually need you are CREATING SECURITY HOLES IN THE SERVER !)

# Open the port
 ynh_script_progression --message="Configuring firewall..."  --weight=1
 ynh_exec_warn_less yunohost firewall allow TCP $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..."  --weight=1

### `ynh_install_app_dependencies` allows you to add any "apt" dependencies to the package.
### Those deb packages will be installed as dependencies of this package.
### If you're not using this helper:
###		- Remove the section "REMOVE DEPENDENCIES" in the remove script
###		- Remove the variable "pkg_dependencies" in _common.sh
###		- As well as the section "REINSTALL DEPENDENCIES" in the restore script
###		- And the section "UPGRADE DEPENDENCIES" in the upgrade script
if [ "$virtualisation" = "true" ]
then
	ynh_install_app_dependencies $pkg_dependencies_virtualisation
fi 
#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."  --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..."  --weight=1

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file conf/app.src

mkdir -p $final_path
ynh_app_setting_set --app=$app --key=final_path --value=$final_path

# Download, check integrity, uncompress and patch the source from app.src
pushd $final_path
	install_garage
popd

# FIXME: this should be managed by the core in the future
# Here, as a packager, you may have to tweak the ownerhsip/permissions
# such that the appropriate users (e.g. maybe www-data) can access
# files in some cases.
# But FOR THE LOVE OF GOD, do not allow r/x for "others" on the entire folder -
# this will be treated as a security issue.
chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:$app "$final_path"


#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..."  --weight=1

### `ynh_add_nginx_config` will use the file conf/nginx.conf

# Create a dedicated NGINX config
ynh_add_nginx_config

#add wildcard subdomain
ynh_replace_special_string --match_string="server_name $domain" --replace_string="server_name $domain *.$domain" --target_file="/etc/nginx/conf.d/$domain.conf"
ynh_store_file_checksum --file="/etc/nginx/conf.d/$domain.conf"
#=================================================
# SPECIFIC SETUP
#=================================================
# ...
#=================================================

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..."  --weight=1

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

	ynh_add_config --template="mount_disk.sh" --destination="$final_path/mount_disk.sh"
	ynh_add_config --template="umount_disk.sh" --destination="$final_path/umount_disk.sh"
	ynh_add_config --template="garage.toml" --destination="$final_path/garage.toml"
	chmod +x "$final_path/mount_disk.sh" "$final_path/umount_disk.sh"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
chmod 600 "$final_path/garage.toml"
chown $app:$app "$final_path/garage.toml"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$final_path/some_config_file"
### ynh_store_file_checksum --file="$final_path/some_config_file"


#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..."  --weight=1

### Use these lines if you need to create a directory to store "persistent files" for the application.
### Usually this directory is used to store uploaded files or any file that won't be updated during 
### an upgrade and that won't be deleted during app removal unless "--purge" option is used.
### If you're not using these lines:
###		- Remove the section "BACKUP THE DATA DIR" in the backup script
###		- Remove the section "RESTORE THE DATA DIRECTORY" in the restore script
###     - As well as the section "REMOVE DATA DIR" in the remove script

ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir/data

#=================================================
# create data partition
#=================================================

if [ "$virtualisation" = "true" ]
then
	# to be sure to not exceed size limit, i use a virtual disk with a fix size to have a max limit size.
	qemu-img create -f qcow2 $datadir/garage_data.qcow2 "$weight"G
	VIRTUALISATION=true $final_path/mount_disk.sh true
fi

# FIXME: this should be managed by the core in the future
# Here, as a packager, you may have to tweak the ownerhsip/permissions
# such that the appropriate users (e.g. maybe www-data) can access
# files in some cases.
# But FOR THE LOVE OF GOD, do not allow r/x for "others" on the entire folder -
# this will be treated as a security issue.
chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:$app "$datadir"

if [ "$virtualisation" = "true" ]
then
	VIRTUALISATION=true $final_path/umount_disk.sh
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..."  --weight=1

### `ynh_systemd_config` is used to configure a systemd script for an app.
### It can be used for apps that use sysvinit (with adaptation) or systemd.
### Have a look at the app to be sure this app needs a systemd script.
### `ynh_systemd_config` will use the file conf/systemd.service
### If you're not using these lines:
###		- You can remove those files in conf/.
###		- Remove the section "BACKUP SYSTEMD" in the backup script
###		- Remove also the section "STOP AND REMOVE SERVICE" in the remove script
###		- As well as the section "RESTORE SYSTEMD" in the restore script
###		- And the section "SETUP SYSTEMD" in the upgrade script

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..."  --weight=1

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###		- Remove the section "BACKUP LOGROTATE" in the backup script
###		- Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###		- And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."  --weight=1

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###		- You can remove these files in conf/.
###		- Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###		- As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###		- And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

yunohost service add --needs_exposed_ports $port --description="s3 storage" --log="/var/log/$app/$app.log" $app

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)


#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."  --weight=1

### `ynh_systemd_action` is used to start a systemd service for an app.
### Only needed if you have configure a systemd service
### If you're not using these lines:
###		- Remove the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the backup script
###		- As well as the section "START SYSTEMD SERVICE" in the restore script
###		- As well as the section"STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the upgrade script
###		- And the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the change_url script

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"


#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..."  --weight=1

	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission="main" --add="visitors"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."  --weight=1

ynh_systemd_action --service_name=nginx --action=reload


#=================================================
# CONFIGURE GARAGE
#=================================================
ynh_script_progression --message="Configuring garage..."  --weight=1

garage_command="$final_path/garage -c $final_path/garage.toml"

node_id=$($garage_command node id -q 2>/dev/null | cut -d '@' -f1)
ynh_app_setting_set --app=$app --key=node_id --value=$node_id


# define node
$garage_command layout assign $node_id -z $domain -c $weight -t $domain
# if there is enough node, apply layout
apply_layout "$garage_command"

if [ -n "$bootstrap_peers" ] 
then
	garage_connect "$garage_command" "$bootstrap_peers"
fi

self_bootstrap_peers="$($garage_command node id --quiet)"
garage_layout="$($garage_command layout show)"

#=================================================
# Send email to admin
#=================================================
app_message="
your garage node have been installed. You can now connect to other nodes with the following identifiers :

	rpc_secret: $rpc_secret
	bootstrap_peers: $self_bootstrap_peers
	
Current garage layout : 

$garage_layout"

ynh_send_readme_to_admin --app_message="$app_message"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed"  --last
